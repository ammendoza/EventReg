/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package edu.uoc.eventreg.model;

import com.liferay.portal.LocaleException;
import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.model.BaseModel;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;

import java.io.Serializable;

import java.util.Date;
import java.util.Locale;
import java.util.Map;

/**
 * The base model interface for the RegEvent service. Represents a row in the &quot;EVENTREG_RegEvent&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link edu.uoc.eventreg.model.impl.RegEventModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link edu.uoc.eventreg.model.impl.RegEventImpl}.
 * </p>
 *
 * @author Ana Mendoza
 * @see RegEvent
 * @see edu.uoc.eventreg.model.impl.RegEventImpl
 * @see edu.uoc.eventreg.model.impl.RegEventModelImpl
 * @generated
 */
public interface RegEventModel extends BaseModel<RegEvent> {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a reg event model instance should use the {@link RegEvent} interface instead.
	 */

	/**
	 * Returns the primary key of this reg event.
	 *
	 * @return the primary key of this reg event
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this reg event.
	 *
	 * @param primaryKey the primary key of this reg event
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the ID of this reg event.
	 *
	 * @return the ID of this reg event
	 */
	public long getId();

	/**
	 * Sets the ID of this reg event.
	 *
	 * @param id the ID of this reg event
	 */
	public void setId(long id);

	/**
	 * Returns the company ID of this reg event.
	 *
	 * @return the company ID of this reg event
	 */
	public long getCompanyId();

	/**
	 * Sets the company ID of this reg event.
	 *
	 * @param companyId the company ID of this reg event
	 */
	public void setCompanyId(long companyId);

	/**
	 * Returns the group ID of this reg event.
	 *
	 * @return the group ID of this reg event
	 */
	public long getGroupId();

	/**
	 * Sets the group ID of this reg event.
	 *
	 * @param groupId the group ID of this reg event
	 */
	public void setGroupId(long groupId);

	/**
	 * Returns the title of this reg event.
	 *
	 * @return the title of this reg event
	 */
	public String getTitle();

	/**
	 * Returns the localized title of this reg event in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized title of this reg event
	 */
	@AutoEscape
	public String getTitle(Locale locale);

	/**
	 * Returns the localized title of this reg event in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized title of this reg event. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getTitle(Locale locale, boolean useDefault);

	/**
	 * Returns the localized title of this reg event in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized title of this reg event
	 */
	@AutoEscape
	public String getTitle(String languageId);

	/**
	 * Returns the localized title of this reg event in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized title of this reg event
	 */
	@AutoEscape
	public String getTitle(String languageId, boolean useDefault);

	@AutoEscape
	public String getTitleCurrentLanguageId();

	@AutoEscape
	public String getTitleCurrentValue();

	/**
	 * Returns a map of the locales and localized titles of this reg event.
	 *
	 * @return the locales and localized titles of this reg event
	 */
	public Map<Locale, String> getTitleMap();

	/**
	 * Sets the title of this reg event.
	 *
	 * @param title the title of this reg event
	 */
	public void setTitle(String title);

	/**
	 * Sets the localized title of this reg event in the language.
	 *
	 * @param title the localized title of this reg event
	 * @param locale the locale of the language
	 */
	public void setTitle(String title, Locale locale);

	/**
	 * Sets the localized title of this reg event in the language, and sets the default locale.
	 *
	 * @param title the localized title of this reg event
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setTitle(String title, Locale locale, Locale defaultLocale);

	public void setTitleCurrentLanguageId(String languageId);

	/**
	 * Sets the localized titles of this reg event from the map of locales and localized titles.
	 *
	 * @param titleMap the locales and localized titles of this reg event
	 */
	public void setTitleMap(Map<Locale, String> titleMap);

	/**
	 * Sets the localized titles of this reg event from the map of locales and localized titles, and sets the default locale.
	 *
	 * @param titleMap the locales and localized titles of this reg event
	 * @param defaultLocale the default locale
	 */
	public void setTitleMap(Map<Locale, String> titleMap, Locale defaultLocale);

	/**
	 * Returns the description of this reg event.
	 *
	 * @return the description of this reg event
	 */
	public String getDescription();

	/**
	 * Returns the localized description of this reg event in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized description of this reg event
	 */
	@AutoEscape
	public String getDescription(Locale locale);

	/**
	 * Returns the localized description of this reg event in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized description of this reg event. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getDescription(Locale locale, boolean useDefault);

	/**
	 * Returns the localized description of this reg event in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized description of this reg event
	 */
	@AutoEscape
	public String getDescription(String languageId);

	/**
	 * Returns the localized description of this reg event in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized description of this reg event
	 */
	@AutoEscape
	public String getDescription(String languageId, boolean useDefault);

	@AutoEscape
	public String getDescriptionCurrentLanguageId();

	@AutoEscape
	public String getDescriptionCurrentValue();

	/**
	 * Returns a map of the locales and localized descriptions of this reg event.
	 *
	 * @return the locales and localized descriptions of this reg event
	 */
	public Map<Locale, String> getDescriptionMap();

	/**
	 * Sets the description of this reg event.
	 *
	 * @param description the description of this reg event
	 */
	public void setDescription(String description);

	/**
	 * Sets the localized description of this reg event in the language.
	 *
	 * @param description the localized description of this reg event
	 * @param locale the locale of the language
	 */
	public void setDescription(String description, Locale locale);

	/**
	 * Sets the localized description of this reg event in the language, and sets the default locale.
	 *
	 * @param description the localized description of this reg event
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setDescription(String description, Locale locale,
		Locale defaultLocale);

	public void setDescriptionCurrentLanguageId(String languageId);

	/**
	 * Sets the localized descriptions of this reg event from the map of locales and localized descriptions.
	 *
	 * @param descriptionMap the locales and localized descriptions of this reg event
	 */
	public void setDescriptionMap(Map<Locale, String> descriptionMap);

	/**
	 * Sets the localized descriptions of this reg event from the map of locales and localized descriptions, and sets the default locale.
	 *
	 * @param descriptionMap the locales and localized descriptions of this reg event
	 * @param defaultLocale the default locale
	 */
	public void setDescriptionMap(Map<Locale, String> descriptionMap,
		Locale defaultLocale);

	/**
	 * Returns the address of this reg event.
	 *
	 * @return the address of this reg event
	 */
	public String getAddress();

	/**
	 * Returns the localized address of this reg event in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized address of this reg event
	 */
	@AutoEscape
	public String getAddress(Locale locale);

	/**
	 * Returns the localized address of this reg event in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized address of this reg event. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getAddress(Locale locale, boolean useDefault);

	/**
	 * Returns the localized address of this reg event in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized address of this reg event
	 */
	@AutoEscape
	public String getAddress(String languageId);

	/**
	 * Returns the localized address of this reg event in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized address of this reg event
	 */
	@AutoEscape
	public String getAddress(String languageId, boolean useDefault);

	@AutoEscape
	public String getAddressCurrentLanguageId();

	@AutoEscape
	public String getAddressCurrentValue();

	/**
	 * Returns a map of the locales and localized addresses of this reg event.
	 *
	 * @return the locales and localized addresses of this reg event
	 */
	public Map<Locale, String> getAddressMap();

	/**
	 * Sets the address of this reg event.
	 *
	 * @param address the address of this reg event
	 */
	public void setAddress(String address);

	/**
	 * Sets the localized address of this reg event in the language.
	 *
	 * @param address the localized address of this reg event
	 * @param locale the locale of the language
	 */
	public void setAddress(String address, Locale locale);

	/**
	 * Sets the localized address of this reg event in the language, and sets the default locale.
	 *
	 * @param address the localized address of this reg event
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setAddress(String address, Locale locale, Locale defaultLocale);

	public void setAddressCurrentLanguageId(String languageId);

	/**
	 * Sets the localized addresses of this reg event from the map of locales and localized addresses.
	 *
	 * @param addressMap the locales and localized addresses of this reg event
	 */
	public void setAddressMap(Map<Locale, String> addressMap);

	/**
	 * Sets the localized addresses of this reg event from the map of locales and localized addresses, and sets the default locale.
	 *
	 * @param addressMap the locales and localized addresses of this reg event
	 * @param defaultLocale the default locale
	 */
	public void setAddressMap(Map<Locale, String> addressMap,
		Locale defaultLocale);

	/**
	 * Returns the location of this reg event.
	 *
	 * @return the location of this reg event
	 */
	public String getLocation();

	/**
	 * Returns the localized location of this reg event in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized location of this reg event
	 */
	@AutoEscape
	public String getLocation(Locale locale);

	/**
	 * Returns the localized location of this reg event in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized location of this reg event. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getLocation(Locale locale, boolean useDefault);

	/**
	 * Returns the localized location of this reg event in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized location of this reg event
	 */
	@AutoEscape
	public String getLocation(String languageId);

	/**
	 * Returns the localized location of this reg event in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized location of this reg event
	 */
	@AutoEscape
	public String getLocation(String languageId, boolean useDefault);

	@AutoEscape
	public String getLocationCurrentLanguageId();

	@AutoEscape
	public String getLocationCurrentValue();

	/**
	 * Returns a map of the locales and localized locations of this reg event.
	 *
	 * @return the locales and localized locations of this reg event
	 */
	public Map<Locale, String> getLocationMap();

	/**
	 * Sets the location of this reg event.
	 *
	 * @param location the location of this reg event
	 */
	public void setLocation(String location);

	/**
	 * Sets the localized location of this reg event in the language.
	 *
	 * @param location the localized location of this reg event
	 * @param locale the locale of the language
	 */
	public void setLocation(String location, Locale locale);

	/**
	 * Sets the localized location of this reg event in the language, and sets the default locale.
	 *
	 * @param location the localized location of this reg event
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setLocation(String location, Locale locale, Locale defaultLocale);

	public void setLocationCurrentLanguageId(String languageId);

	/**
	 * Sets the localized locations of this reg event from the map of locales and localized locations.
	 *
	 * @param locationMap the locales and localized locations of this reg event
	 */
	public void setLocationMap(Map<Locale, String> locationMap);

	/**
	 * Sets the localized locations of this reg event from the map of locales and localized locations, and sets the default locale.
	 *
	 * @param locationMap the locales and localized locations of this reg event
	 * @param defaultLocale the default locale
	 */
	public void setLocationMap(Map<Locale, String> locationMap,
		Locale defaultLocale);

	/**
	 * Returns the coord x of this reg event.
	 *
	 * @return the coord x of this reg event
	 */
	@AutoEscape
	public String getCoordX();

	/**
	 * Sets the coord x of this reg event.
	 *
	 * @param coordX the coord x of this reg event
	 */
	public void setCoordX(String coordX);

	/**
	 * Returns the coord y of this reg event.
	 *
	 * @return the coord y of this reg event
	 */
	@AutoEscape
	public String getCoordY();

	/**
	 * Sets the coord y of this reg event.
	 *
	 * @param coordY the coord y of this reg event
	 */
	public void setCoordY(String coordY);

	/**
	 * Returns the create date of this reg event.
	 *
	 * @return the create date of this reg event
	 */
	public Date getCreateDate();

	/**
	 * Sets the create date of this reg event.
	 *
	 * @param createDate the create date of this reg event
	 */
	public void setCreateDate(Date createDate);

	/**
	 * Returns the modified date of this reg event.
	 *
	 * @return the modified date of this reg event
	 */
	public Date getModifiedDate();

	/**
	 * Sets the modified date of this reg event.
	 *
	 * @param modifiedDate the modified date of this reg event
	 */
	public void setModifiedDate(Date modifiedDate);

	/**
	 * Returns the requires approval of this reg event.
	 *
	 * @return the requires approval of this reg event
	 */
	public boolean getRequiresApproval();

	/**
	 * Returns <code>true</code> if this reg event is requires approval.
	 *
	 * @return <code>true</code> if this reg event is requires approval; <code>false</code> otherwise
	 */
	public boolean isRequiresApproval();

	/**
	 * Sets whether this reg event is requires approval.
	 *
	 * @param requiresApproval the requires approval of this reg event
	 */
	public void setRequiresApproval(boolean requiresApproval);

	/**
	 * Returns the status of this reg event.
	 *
	 * @return the status of this reg event
	 */
	public int getStatus();

	/**
	 * Sets the status of this reg event.
	 *
	 * @param status the status of this reg event
	 */
	public void setStatus(int status);

	/**
	 * Returns the created by of this reg event.
	 *
	 * @return the created by of this reg event
	 */
	public long getCreatedBy();

	/**
	 * Sets the created by of this reg event.
	 *
	 * @param createdBy the created by of this reg event
	 */
	public void setCreatedBy(long createdBy);

	@Override
	public boolean isNew();

	@Override
	public void setNew(boolean n);

	@Override
	public boolean isCachedModel();

	@Override
	public void setCachedModel(boolean cachedModel);

	@Override
	public boolean isEscapedModel();

	@Override
	public Serializable getPrimaryKeyObj();

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	@Override
	public ExpandoBridge getExpandoBridge();

	@Override
	public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

	@Override
	public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	public String[] getAvailableLanguageIds();

	public String getDefaultLanguageId();

	public void prepareLocalizedFieldsForImport() throws LocaleException;

	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException;

	@Override
	public Object clone();

	@Override
	public int compareTo(edu.uoc.eventreg.model.RegEvent regEvent);

	@Override
	public int hashCode();

	@Override
	public CacheModel<edu.uoc.eventreg.model.RegEvent> toCacheModel();

	@Override
	public edu.uoc.eventreg.model.RegEvent toEscapedModel();

	@Override
	public edu.uoc.eventreg.model.RegEvent toUnescapedModel();

	@Override
	public String toString();

	@Override
	public String toXmlString();
}