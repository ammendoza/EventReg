/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package edu.uoc.eventreg.model;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.model.BaseModel;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;

import java.io.Serializable;

import java.util.Date;

/**
 * The base model interface for the RegEvent service. Represents a row in the &quot;EVENTREG_RegEvent&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link edu.uoc.eventreg.model.impl.RegEventModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link edu.uoc.eventreg.model.impl.RegEventImpl}.
 * </p>
 *
 * @author Ana Mendoza
 * @see RegEvent
 * @see edu.uoc.eventreg.model.impl.RegEventImpl
 * @see edu.uoc.eventreg.model.impl.RegEventModelImpl
 * @generated
 */
public interface RegEventModel extends BaseModel<RegEvent> {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a reg event model instance should use the {@link RegEvent} interface instead.
	 */

	/**
	 * Returns the primary key of this reg event.
	 *
	 * @return the primary key of this reg event
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this reg event.
	 *
	 * @param primaryKey the primary key of this reg event
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the ID of this reg event.
	 *
	 * @return the ID of this reg event
	 */
	public long getId();

	/**
	 * Sets the ID of this reg event.
	 *
	 * @param id the ID of this reg event
	 */
	public void setId(long id);

	/**
	 * Returns the company ID of this reg event.
	 *
	 * @return the company ID of this reg event
	 */
	public long getCompanyId();

	/**
	 * Sets the company ID of this reg event.
	 *
	 * @param companyId the company ID of this reg event
	 */
	public void setCompanyId(long companyId);

	/**
	 * Returns the group ID of this reg event.
	 *
	 * @return the group ID of this reg event
	 */
	public long getGroupId();

	/**
	 * Sets the group ID of this reg event.
	 *
	 * @param groupId the group ID of this reg event
	 */
	public void setGroupId(long groupId);

	/**
	 * Returns the title of this reg event.
	 *
	 * @return the title of this reg event
	 */
	@AutoEscape
	public String getTitle();

	/**
	 * Sets the title of this reg event.
	 *
	 * @param title the title of this reg event
	 */
	public void setTitle(String title);

	/**
	 * Returns the description of this reg event.
	 *
	 * @return the description of this reg event
	 */
	@AutoEscape
	public String getDescription();

	/**
	 * Sets the description of this reg event.
	 *
	 * @param description the description of this reg event
	 */
	public void setDescription(String description);

	/**
	 * Returns the address of this reg event.
	 *
	 * @return the address of this reg event
	 */
	@AutoEscape
	public String getAddress();

	/**
	 * Sets the address of this reg event.
	 *
	 * @param address the address of this reg event
	 */
	public void setAddress(String address);

	/**
	 * Returns the location of this reg event.
	 *
	 * @return the location of this reg event
	 */
	@AutoEscape
	public String getLocation();

	/**
	 * Sets the location of this reg event.
	 *
	 * @param location the location of this reg event
	 */
	public void setLocation(String location);

	/**
	 * Returns the coord x of this reg event.
	 *
	 * @return the coord x of this reg event
	 */
	@AutoEscape
	public String getCoordX();

	/**
	 * Sets the coord x of this reg event.
	 *
	 * @param coordX the coord x of this reg event
	 */
	public void setCoordX(String coordX);

	/**
	 * Returns the coord y of this reg event.
	 *
	 * @return the coord y of this reg event
	 */
	@AutoEscape
	public String getCoordY();

	/**
	 * Sets the coord y of this reg event.
	 *
	 * @param coordY the coord y of this reg event
	 */
	public void setCoordY(String coordY);

	/**
	 * Returns the create date of this reg event.
	 *
	 * @return the create date of this reg event
	 */
	public Date getCreateDate();

	/**
	 * Sets the create date of this reg event.
	 *
	 * @param createDate the create date of this reg event
	 */
	public void setCreateDate(Date createDate);

	/**
	 * Returns the modified date of this reg event.
	 *
	 * @return the modified date of this reg event
	 */
	public Date getModifiedDate();

	/**
	 * Sets the modified date of this reg event.
	 *
	 * @param modifiedDate the modified date of this reg event
	 */
	public void setModifiedDate(Date modifiedDate);

	/**
	 * Returns the requires approval of this reg event.
	 *
	 * @return the requires approval of this reg event
	 */
	public boolean getRequiresApproval();

	/**
	 * Returns <code>true</code> if this reg event is requires approval.
	 *
	 * @return <code>true</code> if this reg event is requires approval; <code>false</code> otherwise
	 */
	public boolean isRequiresApproval();

	/**
	 * Sets whether this reg event is requires approval.
	 *
	 * @param requiresApproval the requires approval of this reg event
	 */
	public void setRequiresApproval(boolean requiresApproval);

	/**
	 * Returns the status of this reg event.
	 *
	 * @return the status of this reg event
	 */
	public int getStatus();

	/**
	 * Sets the status of this reg event.
	 *
	 * @param status the status of this reg event
	 */
	public void setStatus(int status);

	@Override
	public boolean isNew();

	@Override
	public void setNew(boolean n);

	@Override
	public boolean isCachedModel();

	@Override
	public void setCachedModel(boolean cachedModel);

	@Override
	public boolean isEscapedModel();

	@Override
	public Serializable getPrimaryKeyObj();

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	@Override
	public ExpandoBridge getExpandoBridge();

	@Override
	public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

	@Override
	public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	@Override
	public Object clone();

	@Override
	public int compareTo(edu.uoc.eventreg.model.RegEvent regEvent);

	@Override
	public int hashCode();

	@Override
	public CacheModel<edu.uoc.eventreg.model.RegEvent> toCacheModel();

	@Override
	public edu.uoc.eventreg.model.RegEvent toEscapedModel();

	@Override
	public edu.uoc.eventreg.model.RegEvent toUnescapedModel();

	@Override
	public String toString();

	@Override
	public String toXmlString();
}