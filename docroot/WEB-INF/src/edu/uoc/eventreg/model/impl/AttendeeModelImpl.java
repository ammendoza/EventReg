/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package edu.uoc.eventreg.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import edu.uoc.eventreg.model.Attendee;
import edu.uoc.eventreg.model.AttendeeModel;
import edu.uoc.eventreg.model.AttendeeSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Attendee service. Represents a row in the &quot;EVENTREG_Attendee&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link edu.uoc.eventreg.model.AttendeeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AttendeeImpl}.
 * </p>
 *
 * @author Ana Mendoza
 * @see AttendeeImpl
 * @see edu.uoc.eventreg.model.Attendee
 * @see edu.uoc.eventreg.model.AttendeeModel
 * @generated
 */
@JSON(strict = true)
public class AttendeeModelImpl extends BaseModelImpl<Attendee>
	implements AttendeeModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a attendee model instance should use the {@link edu.uoc.eventreg.model.Attendee} interface instead.
	 */
	public static final String TABLE_NAME = "EVENTREG_Attendee";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "surname", Types.VARCHAR },
			{ "company", Types.VARCHAR },
			{ "email", Types.VARCHAR },
			{ "phone", Types.VARCHAR },
			{ "registerDate", Types.TIMESTAMP },
			{ "reservationCode", Types.VARCHAR },
			{ "status", Types.INTEGER },
			{ "managedBy", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table EVENTREG_Attendee (id_ LONG not null primary key,companyId LONG,groupId LONG,name VARCHAR(75) null,surname VARCHAR(75) null,company VARCHAR(75) null,email VARCHAR(75) null,phone VARCHAR(75) null,registerDate DATE null,reservationCode VARCHAR(75) null,status INTEGER,managedBy LONG)";
	public static final String TABLE_SQL_DROP = "drop table EVENTREG_Attendee";
	public static final String ORDER_BY_JPQL = " ORDER BY attendee.surname ASC";
	public static final String ORDER_BY_SQL = " ORDER BY EVENTREG_Attendee.surname ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.edu.uoc.eventreg.model.Attendee"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.edu.uoc.eventreg.model.Attendee"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Attendee toModel(AttendeeSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Attendee model = new AttendeeImpl();

		model.setId(soapModel.getId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setGroupId(soapModel.getGroupId());
		model.setName(soapModel.getName());
		model.setSurname(soapModel.getSurname());
		model.setCompany(soapModel.getCompany());
		model.setEmail(soapModel.getEmail());
		model.setPhone(soapModel.getPhone());
		model.setRegisterDate(soapModel.getRegisterDate());
		model.setReservationCode(soapModel.getReservationCode());
		model.setStatus(soapModel.getStatus());
		model.setManagedBy(soapModel.getManagedBy());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Attendee> toModels(AttendeeSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Attendee> models = new ArrayList<Attendee>(soapModels.length);

		for (AttendeeSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.edu.uoc.eventreg.model.Attendee"));

	public AttendeeModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Attendee.class;
	}

	@Override
	public String getModelClassName() {
		return Attendee.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("companyId", getCompanyId());
		attributes.put("groupId", getGroupId());
		attributes.put("name", getName());
		attributes.put("surname", getSurname());
		attributes.put("company", getCompany());
		attributes.put("email", getEmail());
		attributes.put("phone", getPhone());
		attributes.put("registerDate", getRegisterDate());
		attributes.put("reservationCode", getReservationCode());
		attributes.put("status", getStatus());
		attributes.put("managedBy", getManagedBy());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String surname = (String)attributes.get("surname");

		if (surname != null) {
			setSurname(surname);
		}

		String company = (String)attributes.get("company");

		if (company != null) {
			setCompany(company);
		}

		String email = (String)attributes.get("email");

		if (email != null) {
			setEmail(email);
		}

		String phone = (String)attributes.get("phone");

		if (phone != null) {
			setPhone(phone);
		}

		Date registerDate = (Date)attributes.get("registerDate");

		if (registerDate != null) {
			setRegisterDate(registerDate);
		}

		String reservationCode = (String)attributes.get("reservationCode");

		if (reservationCode != null) {
			setReservationCode(reservationCode);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Long managedBy = (Long)attributes.get("managedBy");

		if (managedBy != null) {
			setManagedBy(managedBy);
		}
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@JSON
	@Override
	public String getSurname() {
		if (_surname == null) {
			return StringPool.BLANK;
		}
		else {
			return _surname;
		}
	}

	@Override
	public void setSurname(String surname) {
		_surname = surname;
	}

	@JSON
	@Override
	public String getCompany() {
		if (_company == null) {
			return StringPool.BLANK;
		}
		else {
			return _company;
		}
	}

	@Override
	public void setCompany(String company) {
		_company = company;
	}

	@JSON
	@Override
	public String getEmail() {
		if (_email == null) {
			return StringPool.BLANK;
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		_email = email;
	}

	@JSON
	@Override
	public String getPhone() {
		if (_phone == null) {
			return StringPool.BLANK;
		}
		else {
			return _phone;
		}
	}

	@Override
	public void setPhone(String phone) {
		_phone = phone;
	}

	@JSON
	@Override
	public Date getRegisterDate() {
		return _registerDate;
	}

	@Override
	public void setRegisterDate(Date registerDate) {
		_registerDate = registerDate;
	}

	@JSON
	@Override
	public String getReservationCode() {
		if (_reservationCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _reservationCode;
		}
	}

	@Override
	public void setReservationCode(String reservationCode) {
		_reservationCode = reservationCode;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_status = status;
	}

	@JSON
	@Override
	public long getManagedBy() {
		return _managedBy;
	}

	@Override
	public void setManagedBy(long managedBy) {
		_managedBy = managedBy;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Attendee.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Attendee toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Attendee)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AttendeeImpl attendeeImpl = new AttendeeImpl();

		attendeeImpl.setId(getId());
		attendeeImpl.setCompanyId(getCompanyId());
		attendeeImpl.setGroupId(getGroupId());
		attendeeImpl.setName(getName());
		attendeeImpl.setSurname(getSurname());
		attendeeImpl.setCompany(getCompany());
		attendeeImpl.setEmail(getEmail());
		attendeeImpl.setPhone(getPhone());
		attendeeImpl.setRegisterDate(getRegisterDate());
		attendeeImpl.setReservationCode(getReservationCode());
		attendeeImpl.setStatus(getStatus());
		attendeeImpl.setManagedBy(getManagedBy());

		attendeeImpl.resetOriginalValues();

		return attendeeImpl;
	}

	@Override
	public int compareTo(Attendee attendee) {
		int value = 0;

		value = getSurname().compareTo(attendee.getSurname());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Attendee)) {
			return false;
		}

		Attendee attendee = (Attendee)obj;

		long primaryKey = attendee.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Attendee> toCacheModel() {
		AttendeeCacheModel attendeeCacheModel = new AttendeeCacheModel();

		attendeeCacheModel.id = getId();

		attendeeCacheModel.companyId = getCompanyId();

		attendeeCacheModel.groupId = getGroupId();

		attendeeCacheModel.name = getName();

		String name = attendeeCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			attendeeCacheModel.name = null;
		}

		attendeeCacheModel.surname = getSurname();

		String surname = attendeeCacheModel.surname;

		if ((surname != null) && (surname.length() == 0)) {
			attendeeCacheModel.surname = null;
		}

		attendeeCacheModel.company = getCompany();

		String company = attendeeCacheModel.company;

		if ((company != null) && (company.length() == 0)) {
			attendeeCacheModel.company = null;
		}

		attendeeCacheModel.email = getEmail();

		String email = attendeeCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			attendeeCacheModel.email = null;
		}

		attendeeCacheModel.phone = getPhone();

		String phone = attendeeCacheModel.phone;

		if ((phone != null) && (phone.length() == 0)) {
			attendeeCacheModel.phone = null;
		}

		Date registerDate = getRegisterDate();

		if (registerDate != null) {
			attendeeCacheModel.registerDate = registerDate.getTime();
		}
		else {
			attendeeCacheModel.registerDate = Long.MIN_VALUE;
		}

		attendeeCacheModel.reservationCode = getReservationCode();

		String reservationCode = attendeeCacheModel.reservationCode;

		if ((reservationCode != null) && (reservationCode.length() == 0)) {
			attendeeCacheModel.reservationCode = null;
		}

		attendeeCacheModel.status = getStatus();

		attendeeCacheModel.managedBy = getManagedBy();

		return attendeeCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", surname=");
		sb.append(getSurname());
		sb.append(", company=");
		sb.append(getCompany());
		sb.append(", email=");
		sb.append(getEmail());
		sb.append(", phone=");
		sb.append(getPhone());
		sb.append(", registerDate=");
		sb.append(getRegisterDate());
		sb.append(", reservationCode=");
		sb.append(getReservationCode());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", managedBy=");
		sb.append(getManagedBy());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append("edu.uoc.eventreg.model.Attendee");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>surname</column-name><column-value><![CDATA[");
		sb.append(getSurname());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>company</column-name><column-value><![CDATA[");
		sb.append(getCompany());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>email</column-name><column-value><![CDATA[");
		sb.append(getEmail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>phone</column-name><column-value><![CDATA[");
		sb.append(getPhone());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>registerDate</column-name><column-value><![CDATA[");
		sb.append(getRegisterDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>reservationCode</column-name><column-value><![CDATA[");
		sb.append(getReservationCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>managedBy</column-name><column-value><![CDATA[");
		sb.append(getManagedBy());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Attendee.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Attendee.class
		};
	private long _id;
	private long _companyId;
	private long _groupId;
	private String _name;
	private String _surname;
	private String _company;
	private String _email;
	private String _phone;
	private Date _registerDate;
	private String _reservationCode;
	private int _status;
	private long _managedBy;
	private Attendee _escapedModel;
}