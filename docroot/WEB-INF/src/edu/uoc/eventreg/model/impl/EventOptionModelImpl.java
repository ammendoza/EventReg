/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package edu.uoc.eventreg.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import edu.uoc.eventreg.model.EventOption;
import edu.uoc.eventreg.model.EventOptionModel;
import edu.uoc.eventreg.model.EventOptionSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the EventOption service. Represents a row in the &quot;EVENTREG_EventOption&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link edu.uoc.eventreg.model.EventOptionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EventOptionImpl}.
 * </p>
 *
 * @author Ana Mendoza
 * @see EventOptionImpl
 * @see edu.uoc.eventreg.model.EventOption
 * @see edu.uoc.eventreg.model.EventOptionModel
 * @generated
 */
@JSON(strict = true)
public class EventOptionModelImpl extends BaseModelImpl<EventOption>
	implements EventOptionModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a event option model instance should use the {@link edu.uoc.eventreg.model.EventOption} interface instead.
	 */
	public static final String TABLE_NAME = "EVENTREG_EventOption";
	public static final Object[][] TABLE_COLUMNS = {
			{ "eventOptionId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "startDate", Types.TIMESTAMP },
			{ "endDate", Types.TIMESTAMP },
			{ "seats", Types.INTEGER },
			{ "eventId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table EVENTREG_EventOption (eventOptionId LONG not null primary key,companyId LONG,groupId LONG,startDate DATE null,endDate DATE null,seats INTEGER,eventId LONG)";
	public static final String TABLE_SQL_DROP = "drop table EVENTREG_EventOption";
	public static final String ORDER_BY_JPQL = " ORDER BY eventOption.startDate ASC";
	public static final String ORDER_BY_SQL = " ORDER BY EVENTREG_EventOption.startDate ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.edu.uoc.eventreg.model.EventOption"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.edu.uoc.eventreg.model.EventOption"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.edu.uoc.eventreg.model.EventOption"),
			true);
	public static long EVENTID_COLUMN_BITMASK = 1L;
	public static long STARTDATE_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static EventOption toModel(EventOptionSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		EventOption model = new EventOptionImpl();

		model.setEventOptionId(soapModel.getEventOptionId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setGroupId(soapModel.getGroupId());
		model.setStartDate(soapModel.getStartDate());
		model.setEndDate(soapModel.getEndDate());
		model.setSeats(soapModel.getSeats());
		model.setEventId(soapModel.getEventId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<EventOption> toModels(EventOptionSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<EventOption> models = new ArrayList<EventOption>(soapModels.length);

		for (EventOptionSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.edu.uoc.eventreg.model.EventOption"));

	public EventOptionModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _eventOptionId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEventOptionId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _eventOptionId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return EventOption.class;
	}

	@Override
	public String getModelClassName() {
		return EventOption.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("eventOptionId", getEventOptionId());
		attributes.put("companyId", getCompanyId());
		attributes.put("groupId", getGroupId());
		attributes.put("startDate", getStartDate());
		attributes.put("endDate", getEndDate());
		attributes.put("seats", getSeats());
		attributes.put("eventId", getEventId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long eventOptionId = (Long)attributes.get("eventOptionId");

		if (eventOptionId != null) {
			setEventOptionId(eventOptionId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Date startDate = (Date)attributes.get("startDate");

		if (startDate != null) {
			setStartDate(startDate);
		}

		Date endDate = (Date)attributes.get("endDate");

		if (endDate != null) {
			setEndDate(endDate);
		}

		Integer seats = (Integer)attributes.get("seats");

		if (seats != null) {
			setSeats(seats);
		}

		Long eventId = (Long)attributes.get("eventId");

		if (eventId != null) {
			setEventId(eventId);
		}
	}

	@JSON
	@Override
	public long getEventOptionId() {
		return _eventOptionId;
	}

	@Override
	public void setEventOptionId(long eventOptionId) {
		_eventOptionId = eventOptionId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public Date getStartDate() {
		return _startDate;
	}

	@Override
	public void setStartDate(Date startDate) {
		_columnBitmask = -1L;

		_startDate = startDate;
	}

	@JSON
	@Override
	public Date getEndDate() {
		return _endDate;
	}

	@Override
	public void setEndDate(Date endDate) {
		_endDate = endDate;
	}

	@JSON
	@Override
	public int getSeats() {
		return _seats;
	}

	@Override
	public void setSeats(int seats) {
		_seats = seats;
	}

	@JSON
	@Override
	public long getEventId() {
		return _eventId;
	}

	@Override
	public void setEventId(long eventId) {
		_columnBitmask |= EVENTID_COLUMN_BITMASK;

		if (!_setOriginalEventId) {
			_setOriginalEventId = true;

			_originalEventId = _eventId;
		}

		_eventId = eventId;
	}

	public long getOriginalEventId() {
		return _originalEventId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			EventOption.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public EventOption toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (EventOption)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EventOptionImpl eventOptionImpl = new EventOptionImpl();

		eventOptionImpl.setEventOptionId(getEventOptionId());
		eventOptionImpl.setCompanyId(getCompanyId());
		eventOptionImpl.setGroupId(getGroupId());
		eventOptionImpl.setStartDate(getStartDate());
		eventOptionImpl.setEndDate(getEndDate());
		eventOptionImpl.setSeats(getSeats());
		eventOptionImpl.setEventId(getEventId());

		eventOptionImpl.resetOriginalValues();

		return eventOptionImpl;
	}

	@Override
	public int compareTo(EventOption eventOption) {
		int value = 0;

		value = DateUtil.compareTo(getStartDate(), eventOption.getStartDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof EventOption)) {
			return false;
		}

		EventOption eventOption = (EventOption)obj;

		long primaryKey = eventOption.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		EventOptionModelImpl eventOptionModelImpl = this;

		eventOptionModelImpl._originalEventId = eventOptionModelImpl._eventId;

		eventOptionModelImpl._setOriginalEventId = false;

		eventOptionModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<EventOption> toCacheModel() {
		EventOptionCacheModel eventOptionCacheModel = new EventOptionCacheModel();

		eventOptionCacheModel.eventOptionId = getEventOptionId();

		eventOptionCacheModel.companyId = getCompanyId();

		eventOptionCacheModel.groupId = getGroupId();

		Date startDate = getStartDate();

		if (startDate != null) {
			eventOptionCacheModel.startDate = startDate.getTime();
		}
		else {
			eventOptionCacheModel.startDate = Long.MIN_VALUE;
		}

		Date endDate = getEndDate();

		if (endDate != null) {
			eventOptionCacheModel.endDate = endDate.getTime();
		}
		else {
			eventOptionCacheModel.endDate = Long.MIN_VALUE;
		}

		eventOptionCacheModel.seats = getSeats();

		eventOptionCacheModel.eventId = getEventId();

		return eventOptionCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{eventOptionId=");
		sb.append(getEventOptionId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", startDate=");
		sb.append(getStartDate());
		sb.append(", endDate=");
		sb.append(getEndDate());
		sb.append(", seats=");
		sb.append(getSeats());
		sb.append(", eventId=");
		sb.append(getEventId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("edu.uoc.eventreg.model.EventOption");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>eventOptionId</column-name><column-value><![CDATA[");
		sb.append(getEventOptionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startDate</column-name><column-value><![CDATA[");
		sb.append(getStartDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>endDate</column-name><column-value><![CDATA[");
		sb.append(getEndDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>seats</column-name><column-value><![CDATA[");
		sb.append(getSeats());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>eventId</column-name><column-value><![CDATA[");
		sb.append(getEventId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = EventOption.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			EventOption.class
		};
	private long _eventOptionId;
	private long _companyId;
	private long _groupId;
	private Date _startDate;
	private Date _endDate;
	private int _seats;
	private long _eventId;
	private long _originalEventId;
	private boolean _setOriginalEventId;
	private long _columnBitmask;
	private EventOption _escapedModel;
}