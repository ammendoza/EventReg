/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package edu.uoc.eventreg.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import edu.uoc.eventreg.model.RegEvent;
import edu.uoc.eventreg.model.RegEventModel;
import edu.uoc.eventreg.model.RegEventSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the RegEvent service. Represents a row in the &quot;EVENTREG_RegEvent&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link edu.uoc.eventreg.model.RegEventModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RegEventImpl}.
 * </p>
 *
 * @author Ana Mendoza
 * @see RegEventImpl
 * @see edu.uoc.eventreg.model.RegEvent
 * @see edu.uoc.eventreg.model.RegEventModel
 * @generated
 */
@JSON(strict = true)
public class RegEventModelImpl extends BaseModelImpl<RegEvent>
	implements RegEventModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a reg event model instance should use the {@link edu.uoc.eventreg.model.RegEvent} interface instead.
	 */
	public static final String TABLE_NAME = "EVENTREG_RegEvent";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "title", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "address", Types.VARCHAR },
			{ "location", Types.VARCHAR },
			{ "coordX", Types.VARCHAR },
			{ "coordY", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "requiresApproval", Types.BOOLEAN },
			{ "status", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table EVENTREG_RegEvent (id_ LONG not null primary key,companyId LONG,groupId LONG,title VARCHAR(75) null,description VARCHAR(75) null,address VARCHAR(75) null,location VARCHAR(75) null,coordX VARCHAR(75) null,coordY VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,requiresApproval BOOLEAN,status INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table EVENTREG_RegEvent";
	public static final String ORDER_BY_JPQL = " ORDER BY regEvent.createDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY EVENTREG_RegEvent.createDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.edu.uoc.eventreg.model.RegEvent"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.edu.uoc.eventreg.model.RegEvent"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static RegEvent toModel(RegEventSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		RegEvent model = new RegEventImpl();

		model.setId(soapModel.getId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setGroupId(soapModel.getGroupId());
		model.setTitle(soapModel.getTitle());
		model.setDescription(soapModel.getDescription());
		model.setAddress(soapModel.getAddress());
		model.setLocation(soapModel.getLocation());
		model.setCoordX(soapModel.getCoordX());
		model.setCoordY(soapModel.getCoordY());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setRequiresApproval(soapModel.getRequiresApproval());
		model.setStatus(soapModel.getStatus());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<RegEvent> toModels(RegEventSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<RegEvent> models = new ArrayList<RegEvent>(soapModels.length);

		for (RegEventSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.edu.uoc.eventreg.model.RegEvent"));

	public RegEventModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return RegEvent.class;
	}

	@Override
	public String getModelClassName() {
		return RegEvent.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("companyId", getCompanyId());
		attributes.put("groupId", getGroupId());
		attributes.put("title", getTitle());
		attributes.put("description", getDescription());
		attributes.put("address", getAddress());
		attributes.put("location", getLocation());
		attributes.put("coordX", getCoordX());
		attributes.put("coordY", getCoordY());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("requiresApproval", getRequiresApproval());
		attributes.put("status", getStatus());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		String address = (String)attributes.get("address");

		if (address != null) {
			setAddress(address);
		}

		String location = (String)attributes.get("location");

		if (location != null) {
			setLocation(location);
		}

		String coordX = (String)attributes.get("coordX");

		if (coordX != null) {
			setCoordX(coordX);
		}

		String coordY = (String)attributes.get("coordY");

		if (coordY != null) {
			setCoordY(coordY);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Boolean requiresApproval = (Boolean)attributes.get("requiresApproval");

		if (requiresApproval != null) {
			setRequiresApproval(requiresApproval);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	@Override
	public String getAddress() {
		if (_address == null) {
			return StringPool.BLANK;
		}
		else {
			return _address;
		}
	}

	@Override
	public void setAddress(String address) {
		_address = address;
	}

	@JSON
	@Override
	public String getLocation() {
		if (_location == null) {
			return StringPool.BLANK;
		}
		else {
			return _location;
		}
	}

	@Override
	public void setLocation(String location) {
		_location = location;
	}

	@JSON
	@Override
	public String getCoordX() {
		if (_coordX == null) {
			return StringPool.BLANK;
		}
		else {
			return _coordX;
		}
	}

	@Override
	public void setCoordX(String coordX) {
		_coordX = coordX;
	}

	@JSON
	@Override
	public String getCoordY() {
		if (_coordY == null) {
			return StringPool.BLANK;
		}
		else {
			return _coordY;
		}
	}

	@Override
	public void setCoordY(String coordY) {
		_coordY = coordY;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public boolean getRequiresApproval() {
		return _requiresApproval;
	}

	@Override
	public boolean isRequiresApproval() {
		return _requiresApproval;
	}

	@Override
	public void setRequiresApproval(boolean requiresApproval) {
		_requiresApproval = requiresApproval;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_status = status;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			RegEvent.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public RegEvent toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (RegEvent)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		RegEventImpl regEventImpl = new RegEventImpl();

		regEventImpl.setId(getId());
		regEventImpl.setCompanyId(getCompanyId());
		regEventImpl.setGroupId(getGroupId());
		regEventImpl.setTitle(getTitle());
		regEventImpl.setDescription(getDescription());
		regEventImpl.setAddress(getAddress());
		regEventImpl.setLocation(getLocation());
		regEventImpl.setCoordX(getCoordX());
		regEventImpl.setCoordY(getCoordY());
		regEventImpl.setCreateDate(getCreateDate());
		regEventImpl.setModifiedDate(getModifiedDate());
		regEventImpl.setRequiresApproval(getRequiresApproval());
		regEventImpl.setStatus(getStatus());

		regEventImpl.resetOriginalValues();

		return regEventImpl;
	}

	@Override
	public int compareTo(RegEvent regEvent) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(), regEvent.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof RegEvent)) {
			return false;
		}

		RegEvent regEvent = (RegEvent)obj;

		long primaryKey = regEvent.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<RegEvent> toCacheModel() {
		RegEventCacheModel regEventCacheModel = new RegEventCacheModel();

		regEventCacheModel.id = getId();

		regEventCacheModel.companyId = getCompanyId();

		regEventCacheModel.groupId = getGroupId();

		regEventCacheModel.title = getTitle();

		String title = regEventCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			regEventCacheModel.title = null;
		}

		regEventCacheModel.description = getDescription();

		String description = regEventCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			regEventCacheModel.description = null;
		}

		regEventCacheModel.address = getAddress();

		String address = regEventCacheModel.address;

		if ((address != null) && (address.length() == 0)) {
			regEventCacheModel.address = null;
		}

		regEventCacheModel.location = getLocation();

		String location = regEventCacheModel.location;

		if ((location != null) && (location.length() == 0)) {
			regEventCacheModel.location = null;
		}

		regEventCacheModel.coordX = getCoordX();

		String coordX = regEventCacheModel.coordX;

		if ((coordX != null) && (coordX.length() == 0)) {
			regEventCacheModel.coordX = null;
		}

		regEventCacheModel.coordY = getCoordY();

		String coordY = regEventCacheModel.coordY;

		if ((coordY != null) && (coordY.length() == 0)) {
			regEventCacheModel.coordY = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			regEventCacheModel.createDate = createDate.getTime();
		}
		else {
			regEventCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			regEventCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			regEventCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		regEventCacheModel.requiresApproval = getRequiresApproval();

		regEventCacheModel.status = getStatus();

		return regEventCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(27);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", address=");
		sb.append(getAddress());
		sb.append(", location=");
		sb.append(getLocation());
		sb.append(", coordX=");
		sb.append(getCoordX());
		sb.append(", coordY=");
		sb.append(getCoordY());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", requiresApproval=");
		sb.append(getRequiresApproval());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(43);

		sb.append("<model><model-name>");
		sb.append("edu.uoc.eventreg.model.RegEvent");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>address</column-name><column-value><![CDATA[");
		sb.append(getAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>location</column-name><column-value><![CDATA[");
		sb.append(getLocation());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>coordX</column-name><column-value><![CDATA[");
		sb.append(getCoordX());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>coordY</column-name><column-value><![CDATA[");
		sb.append(getCoordY());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requiresApproval</column-name><column-value><![CDATA[");
		sb.append(getRequiresApproval());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = RegEvent.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			RegEvent.class
		};
	private long _id;
	private long _companyId;
	private long _groupId;
	private String _title;
	private String _description;
	private String _address;
	private String _location;
	private String _coordX;
	private String _coordY;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _requiresApproval;
	private int _status;
	private RegEvent _escapedModel;
}